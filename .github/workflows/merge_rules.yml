name: Merge Rule Lists

on:
  # Schedule to run the workflow every day at 05:00 UTC
  schedule:
    - cron: '0 5 * * *'
  # Allow running the workflow manually from the Actions tab
  workflow_dispatch:
  # Run the workflow on pushes to the main branch, but only if files in 'sources/' changed
  push:
    branches:
      - main # Or your default branch name (e.g., master)

# Add permissions to allow the workflow to push to the repository
permissions:
  contents: write

jobs:
  merge_rules:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      # Step 1: Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4 # Use the latest checkout action

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5 # Use the latest Python setup action
        with:
          python-version: '3.11' # Specify desired Python version
          cache: 'pip' # Cache pip dependencies

      # Step 3: Install dependencies (requests library)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install only requests as it's the sole dependency
          pip install requests
          # If using requirements.txt in the future: pip install -r requirements.txt

      # Step 4: Create output directory
      - name: Create output directory
        run: mkdir -p output # Create the output directory if it doesn't exist

      # Step 5: Run the merge script
      - name: Run merge script
        run: python merge_rules.py # Ensure this script writes to the 'output' directory

      # Step 6: Commit and push the changes if the merged list was updated
      - name: Commit and push if changed
        run: |
          git config --global user.name 'github-actions[bot]' # Set committer name
          git config --global user.email 'github-actions[bot]@users.noreply.github.com' # Set committer email
          
          # Check if output directory exists and contains files
          if [ -d "output" ] && [ "$(ls -A output)" ]; then
            # Add all files in the output directory
            git add output/*
            
            # Check if there are changes staged for any files
            if git diff --staged --quiet; then
              echo "No changes to commit in output directory."
            else
              # Commit if any files have changes
              git commit -m "Update rule lists (`date -u`)" # Commit message with timestamp
              
              # Add retry logic for push in case of transient network issues
              retry_count=0
              max_retries=3
              until git push || [ $retry_count -eq $max_retries ];
              do
                retry_count=$((retry_count+1))
                echo "Push failed. Retrying ($retry_count/$max_retries)..."
                sleep 5 # Wait 5 seconds before retrying
              done
              if [ $retry_count -eq $max_retries ]; then
                echo "Push failed after $max_retries attempts."
                exit 1 # Fail the workflow if push fails
              fi
            fi
          else
            echo "Output directory is empty or doesn't exist. Skipping commit and push."
            # Don't fail the workflow, just report that no files were found
          fi 
